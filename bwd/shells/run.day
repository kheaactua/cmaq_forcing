#! /bin/csh -f

# RCS file, release, date & time of last delta, author, state, [and locker]
# $Header: /project/work/rep/SCRIPTS/src/cctm/run.cctm,v 1.4 2006/03/10 21:29:51 sjr Exp $ 

# ======================= CCTMv4.5.1 Run Script ===================== #
# Usage: run.cctm >&! cctm_e2a.log &                                  #
# The following environment variables must be set for this script to  #
# execute properly:                                                   #
#   setenv M3DATA =  source code CVS archive                          #
# To report problems or request help with this script/program:        #
#             http://www.cmascenter.org/html/help.html                #
# =================================================================== #

 set M3DATA=/mnt/mediasonic/opt/data/cmaq/INPUT34
#> Check that M3DATA is set:
 if ( ! -e $M3DATA ) then
    echo "   $M3DATA path does not exist"
    exit 1
    endif
 echo " "; echo " Input data path, M3DATA set to $M3DATA"; echo " "

 set EMIS_CASE = forecast 
 set grid     = la36
 set APPL     = 20070930
 set APPL0    = 20071001
 set CFG      = bwd
 set CFG2     = fwd
 set EXEC     = CCTM_$CFG       # ctm version
 set EXEC2    = CCTM_$CFG2

#> horizontal domain decomposition
#setenv NPCOL_NPROW "1 1"; set NPROCS   = 1 # single processor setting
 setenv NPCOL_NPROW "8 8"; set NPROCS   = 64

#> for Scyld Beowulf ...
#setenv NP $NPROCS
#setenv BEOWULF_JOB_MAP -1:-1:0:0:1:1:2:2:3:3:4:4
#echo " task-processor map `beomap`"

#> Set the working directory:
 set BASE     = $cwd
 cd $BASE; date; cat $BASE/cfg.$CFG; echo "    "; set echo

#> timestep run parameters

 set STDATE   = 2007273     # beginning date
 set STTIME   = 000000        # beginning GMT time (HHMMSS)
 set NSTEPS   = 240000        # time duration (HHMMSS) for this run
 set TSTEP    = 010000        # output time step interval (HHMMSS)
 set ENDDATE  = 2007274
 set ENDTIME  = 000000

#> set log file [ default = unit 6 ]; uncomment to write standard output to a log
#setenv LOGFILE $BASE/$APPL.log

#> turn off excess WRITE3 logging
 setenv IOAPI_LOG_WRITE F

#> stop on inconsistent input file [ T | Y | F | N ]
 setenv FL_ERR_STOP F

#> remove existing output files?
#set DISP = delete
#set DISP = update
 set DISP = keep

#> output files and directories
 set OUTDIR   = /opt/output/apappin/exposure/scratch # output file directory
 set OUTDIR2  = /mnt/mediasonic/opt/output/base      # input file directory
# for 24hr ozone mortality, rd_frc.F ignores FRCfile and OUTDIR3
 set OUTDIR3  = /opt/output/apappin/exposure/ozone8hr/input/forcing_newmet   # forcing file directory
 if ( ! -d "$OUTDIR" ) mkdir -p $OUTDIR
 set CONCfile  = $EXEC"CONC".$APPL                    # CTM_CONC_1
 set ACONCfile = $EXEC"AADJ".${APPL}                 # CTM_AADJ_1
 set DD1file   = $EXEC"DRYDEP".$APPL                  # CTM_DRY_DEP_1
 set WD1file   = $EXEC"WETDEP1".$APPL                 # CTM_WET_DEP_1
 set WD2file   = $EXEC"WETDEP2".$APPL                 # CTM_WET_DEP_2
 set AV1file   = $EXEC"AEROVIS".$APPL                 # CTM_VIS_1
 set AD1file   = $EXEC"AERODIAM".$APPL                # CTM_DIAM_1
 set PG1file   = $EXEC"PING".$APPL                    # CTM_PING_1
 set PGDfile   = $EXEC"PINGDRYDEP".$APPL              # CTM_PING_DDEP_1
 set PGWfile   = $EXEC"PINGAERODIAM".$APPL            # CTM_PING_DIAM_1
 set PA1file   = $EXEC"PA_1".$APPL                    # CTM_IPR_1
 set PA2file   = $EXEC"PA_2".$APPL                    # CTM_IPR_2
 set PA3file   = $EXEC"PA_3".$APPL                    # CTM_IPR_3
 set IRR1file  = $EXEC"IRR_1".$APPL                   # CTM_IRR_1
 set IRR2file  = $EXEC"IRR_2".$APPL                   # CTM_IRR_2
 set IRR3file  = $EXEC"IRR_3".$APPL                   # CTM_IRR_3
 set ADJfile   = $EXEC"ADJ".$APPL                    # CTM_ADJ_1
 set CHKfile   = $EXEC2"CHK".$APPL                    # CTM_CHK_1
 set FRCfile   = $EXEC"_expFRC".$APPL                    # CTM_FRC_1
 set GRDfile   = $EXEC"24ho3_GRD".$APPL                     # CTM_GRD_1

#> set ancillary log file name extensions
 setenv CTM_APPL $APPL

#> set floor file (neg concs)
 setenv FLOOR_FILE $BASE/FLOOR_${APPL}

#> set ping floor file (neg concs) [remember: env var .le. 16 chars]
 setenv PLUME_FLOOR_FILE $BASE/CPLUME_FLOOR_${APPL}

#> horizontal grid defn; check GRIDDESC file for GRID_NAME options
 setenv GRIDDESC GRIDDESC_GT
 setenv GRID_NAME LA36

#> species for integral average conc
 setenv AVG_CONC_SPCS "O3 NO NO2 HCHO CO ETHENE ISOPRENE"

#> layer range for integral average conc
 setenv ACONC_BLEV_ELEV " 1 34"

#> input files and directories

 set OCEANpath = $M3DATA/smoke
 set OCEANfile = OCEANFILE.${grid}.ncf

 set EMISpath  = $M3DATA/smoke
 set EMISfile  = egts_l.${APPL}.${grid}.${EMIS_CASE}.ncf
#set EMISfile  = e_32km_cb4.19990703.ncf
#set EMISfile  = e_08km_cb4.19990702.ncf
#set EMISfile  = e_08km_cb4.19990703.ncf
 
#set TR_EMpath = 
#set TR_EMfile = 
 
#set GC_ICpath = $OUTDIR
#set GC_ICfile = CCTM_e2aCONC.e2a

    if ( $STDATE == 2007273 ) then
    set GC_ICpath = $M3DATA/icon
    set GC_ICfile = ic_zero.nc
    else
    set GC_ICpath = ${OUTDIR}
    set GC_ICfile = ${EXEC}"ADJ".${APPL0}
    endif

 set GC_BCpath = $M3DATA/bcon
 set GC_BCfile = bc_zero.nc
 
 set METpath   = $M3DATA/mcip
 set GC2file   = GRIDCRO2D_${grid}
 set GD2file   = GRIDDOT2D_${grid}
 set MC2file   = METCRO2D_${grid}_${APPL}
 set MD3file   = METDOT3D_${grid}_${APPL}
 set MC3file   = METCRO3D_${grid}_${APPL}
 set MB3file   = METBDY3D_${grid}_${APPL}
 
 set TR_DVpath = $METpath
 set TR_DVfile = $MC2file
 
#> 7-level photolysis data w/ file header
 
 set JVALpath  = $M3DATA/jproc
 set JVALfile  = JTABLE_${STDATE}

 set AE_ICpath = $GC_ICpath
 set NR_ICpath = $GC_ICpath
 set TR_ICpath = $GC_ICpath
 set AE_ICfile = $GC_ICfile
 set NR_ICfile = $GC_ICfile
 set TR_ICfile = $GC_ICfile

 set AE_BCpath = $GC_BCpath
 set NR_BCpath = $GC_BCpath
 set TR_BCpath = $GC_BCpath
 set AE_BCfile = $GC_BCfile
 set NR_BCfile = $GC_BCfile
 set TR_BCfile = $GC_BCfile

#> input and output files and directories (boilerplate)
 source in_out.q
 if ( $status ) exit 1
 
#> for the run control ...

 setenv CTM_STDATE      $STDATE
 setenv CTM_STTIME      $STTIME
 setenv CTM_RUNLEN      $NSTEPS
 setenv CTM_TSTEP       $TSTEP
 setenv CTM_PROGNAME    $EXEC
 setenv CTM_ENDDATE	$ENDDATE
 setenv CTM_ENDTIME	$ENDTIME
 setenv KZMIN 		F

#> look for existing log files
                              
 set test = `ls CTM_LOG_???.${APPL}`
 if ( "$test" != "" ) then
    if ( $DISP == 'delete' ) then
       echo " ancillary log files being deleted"
       foreach file ( $test )
          echo " deleting $file"
          rm $file
          end
       else
       echo "*** Logs exist - run ABORTED ***"
       exit 1
       endif
    endif

#> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 env

 ls -l $BASE/$EXEC; size $BASE/$EXEC

#> Executable call for single PE, uncomment to invoke
#time  $BASE/$EXEC
#pgdbg $BASE/$EXEC

#> Executable call for multiple PE, set location of MPIRUN script
 set MPIRUN = /opt/local/support/Linux2_x86_64pgi/mpich2/1.4.1p1/bin/mpiexec
#set TASKMAP = $BASE/machines8
#cat $TASKMAP
 time $MPIRUN -n $NPROCS $BASE/$EXEC

 date
 exit
